generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model d1b1_commentmeta {
  meta_id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([comment_id], map: "comment_id")
  @@index([meta_key(length: 191)], map: "meta_key")
}

model d1b1_comments {
  comment_ID           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  comment_post_ID      BigInt   @default(0) @db.UnsignedBigInt
  comment_author       String   @db.TinyText
  comment_author_email String   @default(dbgenerated("()")) @db.VarChar(100)
  comment_author_url   String   @default(dbgenerated("()")) @db.VarChar(200)
  comment_author_IP    String   @default(dbgenerated("()")) @db.VarChar(100)
  comment_date         DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  comment_date_gmt     DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  comment_content      String   @db.Text
  comment_karma        Int      @default(0)
  comment_approved     String   @default(dbgenerated("(1)")) @db.VarChar(20)
  comment_agent        String   @default(dbgenerated("()")) @db.VarChar(255)
  comment_type         String   @default(dbgenerated("(comment)")) @db.VarChar(20)
  comment_parent       BigInt   @default(0) @db.UnsignedBigInt
  user_id              BigInt   @default(0) @db.UnsignedBigInt

  @@index([comment_approved, comment_date_gmt], map: "comment_approved_date_gmt")
  @@index([comment_author_email(length: 10)], map: "comment_author_email")
  @@index([comment_date_gmt], map: "comment_date_gmt")
  @@index([comment_parent], map: "comment_parent")
  @@index([comment_post_ID], map: "comment_post_ID")
}

model d1b1_import_detail_log {
  id                 Int     @id @default(autoincrement()) @db.UnsignedInt
  file_name          String  @db.VarChar(255)
  status             String  @db.VarChar(255)
  hash_key           String  @db.VarChar(255)
  total_records      Int?
  processing_records Int?    @default(0)
  remaining_records  Int?    @default(0)
  filesize           String  @db.VarChar(255)
  created            BigInt  @default(0)
  updated            BigInt  @default(0)
  skipped            BigInt  @default(0)
  running            Boolean @default(true)
}

model d1b1_import_log_detail {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  hash_key   String @db.VarChar(255)
  message    String @db.VarChar(255)
  status     String @db.VarChar(255)
  verify     Bytes  @db.Blob
  categories String @db.VarChar(255)
  tags       String @db.VarChar(255)
  post_id    Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model d1b1_import_postID {
  post_id     Int
  line_number Int

  @@ignore
}

model d1b1_links {
  link_id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  link_url         String   @default(dbgenerated("()")) @db.VarChar(255)
  link_name        String   @default(dbgenerated("()")) @db.VarChar(255)
  link_image       String   @default(dbgenerated("()")) @db.VarChar(255)
  link_target      String   @default(dbgenerated("()")) @db.VarChar(25)
  link_description String   @default(dbgenerated("()")) @db.VarChar(255)
  link_visible     String   @default(dbgenerated("(Y)")) @db.VarChar(20)
  link_owner       BigInt   @default(1) @db.UnsignedBigInt
  link_rating      Int      @default(0)
  link_updated     DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  link_rel         String   @default(dbgenerated("()")) @db.VarChar(255)
  link_notes       String   @db.MediumText
  link_rss         String   @default(dbgenerated("()")) @db.VarChar(255)

  @@index([link_visible], map: "link_visible")
}

model d1b1_options {
  option_id    BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @unique(map: "option_name") @default(dbgenerated("()"))
  option_value String @db.LongText
  autoload     String @default(dbgenerated("(yes)")) @db.VarChar(20)

  @@index([autoload], map: "autoload")
}

model d1b1_postmeta {
  meta_id    BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt     @default(0) @db.UnsignedBigInt
  meta_key   String?    @db.VarChar(255)
  meta_value String?    @db.LongText
  post       d1b1_posts @relation(fields: [post_id], references: [ID])

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([post_id], map: "post_id")
}

model d1b1_posts {
  ID                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  post_author             BigInt                    @default(0) @db.UnsignedBigInt
  post_date               DateTime                  @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  post_date_gmt           DateTime                  @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  post_content            String                    @db.LongText
  post_title              String                    @db.Text
  post_excerpt            String                    @db.Text
  post_status             String                    @default(dbgenerated("(publish)")) @db.VarChar(20)
  comment_status          String                    @default(dbgenerated("(open)")) @db.VarChar(20)
  ping_status             String                    @default(dbgenerated("(open)")) @db.VarChar(20)
  post_password           String                    @default(dbgenerated("()")) @db.VarChar(255)
  post_name               String                    @unique @default(dbgenerated("()")) @db.VarChar(200)
  to_ping                 String                    @db.Text
  pinged                  String                    @db.Text
  post_modified           DateTime                  @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  post_modified_gmt       DateTime                  @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  post_content_filtered   String                    @db.LongText
  post_parent             BigInt                    @default(0) @db.UnsignedBigInt
  guid                    String                    @default(dbgenerated("()")) @db.VarChar(255)
  menu_order              Int                       @default(0)
  post_type               String                    @default(dbgenerated("(post)")) @db.VarChar(20)
  post_mime_type          String                    @default(dbgenerated("()")) @db.VarChar(100)
  comment_count           BigInt                    @default(0)
  d1b1_postmeta           d1b1_postmeta[]
  d1b1_term_relationships d1b1_term_relationships[]

  @@index([post_author], map: "post_author")
  @@index([post_name(length: 191)], map: "post_name")
  @@index([post_parent], map: "post_parent")
  @@index([post_type, post_status, post_date, ID], map: "type_status_date")
}

model d1b1_smackcsv_file_events {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  file_name  String   @db.VarChar(255)
  status     String   @db.VarChar(255)
  mode       String   @db.VarChar(255)
  hash_key   String   @db.VarChar(255)
  total_rows Int
  lock       Boolean? @default(false)
  progress   Int?
}

model d1b1_smackuci_events {
  id                 BigInt   @id @default(autoincrement())
  revision           BigInt   @default(0)
  name               String?  @db.VarChar(255)
  original_file_name String?  @db.VarChar(255)
  friendly_name      String?  @db.VarChar(255)
  import_type        String?  @db.VarChar(32)
  filetype           String?  @db.Text
  filepath           String?  @db.Text
  eventKey           String?  @db.VarChar(32)
  registered_on      DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  parent_node        String?  @db.VarChar(255)
  processing         Boolean  @default(false)
  executing          Boolean  @default(false)
  triggered          Boolean  @default(false)
  event_started_at   DateTime @default(now()) @db.Timestamp(0)
  count              BigInt   @default(0)
  processed          BigInt   @default(0)
  created            BigInt   @default(0)
  updated            BigInt   @default(0)
  skipped            BigInt   @default(0)
  deleted            BigInt   @default(0)
  is_terminated      Boolean  @default(false)
  terminated_on      DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  last_activity      DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  siteid             Int      @default(1)
  month              String?  @db.VarChar(60)
  year               String?  @db.VarChar(60)
  deletelog          Boolean? @default(false)
}

model d1b1_term_relationships {
  object_id        BigInt     @default(0) @db.UnsignedBigInt
  post             d1b1_posts @relation(fields: [object_id], references: [ID])
  term_taxonomy_id BigInt     @default(0) @db.UnsignedBigInt
  term_order       Int        @default(0)

  @@id([object_id, term_taxonomy_id])
  @@index([term_taxonomy_id], map: "term_taxonomy_id")
}

model d1b1_term_taxonomy {
  term_taxonomy_id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  term_id          BigInt @default(0) @db.UnsignedBigInt
  taxonomy         String @default(dbgenerated("()")) @db.VarChar(32)
  description      String @db.LongText
  parent           BigInt @default(0) @db.UnsignedBigInt
  count            BigInt @default(0)

  @@unique([term_id, taxonomy], map: "term_id_taxonomy")
  @@index([taxonomy], map: "taxonomy")
}

model d1b1_termmeta {
  meta_id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  term_id    BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([term_id], map: "term_id")
}

model d1b1_terms {
  term_id    BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name       String @default(dbgenerated("()")) @db.VarChar(200)
  slug       String @default(dbgenerated("()")) @db.VarChar(200)
  term_group BigInt @default(0)

  @@index([name(length: 191)], map: "name")
  @@index([slug(length: 191)], map: "slug")
}

model d1b1_ultimate_csv_importer_acf_fields {
  id         Int     @id @default(autoincrement())
  groupId    String  @db.VarChar(100)
  fieldId    String  @db.VarChar(100)
  fieldLabel String  @db.VarChar(100)
  fieldName  String  @db.VarChar(100)
  fieldType  String  @db.VarChar(60)
  fdOption   String? @db.VarChar(100)
}

model d1b1_ultimate_csv_importer_mappingtemplate {
  id           Int      @id @default(autoincrement())
  templatename String   @db.VarChar(250)
  mapping      Bytes    @db.Blob
  createdtime  DateTime @default(now()) @db.Timestamp(0)
  deleted      Int?     @default(0)
  templateused Int?     @default(0)
  mapping_type String?  @db.VarChar(30)
  module       String?  @db.VarChar(50)
  csvname      String?  @db.VarChar(250)
  eventKey     String?  @db.VarChar(60)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model d1b1_ultimate_csv_importer_media {
  post_id    Int?
  attach_id  Int
  image_url  String  @db.VarChar(255)
  hash_key   String  @db.VarChar(255)
  status     String? @default(dbgenerated("(pending)")) @db.VarChar(255)
  module     String? @db.VarChar(255)
  image_type String? @db.VarChar(255)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model d1b1_ultimate_csv_importer_shortcode_manager {
  post_id         Int?
  image_shortcode String  @db.VarChar(255)
  original_image  String  @db.VarChar(255)
  hash_key        String  @db.VarChar(255)
  status          String? @default(dbgenerated("(pending)")) @db.VarChar(255)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model d1b1_ultimate_post_entries {
  ID        Int?
  file_name String? @db.VarChar(255)
  type      String? @db.VarChar(255)
  revision  Int?
  status    String? @db.VarChar(255)

  @@ignore
}

model d1b1_usermeta {
  umeta_id   BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([user_id], map: "user_id")
}

model d1b1_users {
  ID                  BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_login          String   @default(dbgenerated("()")) @db.VarChar(60)
  user_pass           String   @default(dbgenerated("()")) @db.VarChar(255)
  user_nicename       String   @default(dbgenerated("()")) @db.VarChar(50)
  user_email          String   @default(dbgenerated("()")) @db.VarChar(100)
  user_url            String   @default(dbgenerated("()")) @db.VarChar(100)
  user_registered     DateTime @default(dbgenerated("(0000-00-00 00:00:00)")) @ignore @db.DateTime(0)
  user_activation_key String   @default(dbgenerated("()")) @db.VarChar(255)
  user_status         Int      @default(0)
  display_name        String   @default(dbgenerated("()")) @db.VarChar(250)

  @@index([user_email], map: "user_email")
  @@index([user_login], map: "user_login_key")
  @@index([user_nicename], map: "user_nicename")
}
